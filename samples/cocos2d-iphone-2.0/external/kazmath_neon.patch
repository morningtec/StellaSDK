diff --git a/external/kazmath/src/mat4.c b/external/kazmath/src/mat4.c
index 3e109bc..934cc4c 100644
--- a/external/kazmath/src/mat4.c
+++ b/external/kazmath/src/mat4.c
@@ -32,11 +32,13 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #include "kazmath/utility.h"
 #include "kazmath/vec3.h"
-#include "kazmath/mat4.h"
+#include "kazmath/mat4.h"
 #include "kazmath/mat3.h"
 #include "kazmath/quaternion.h"
 #include "kazmath/plane.h"
 
+#include "kazmath/neon_matrix_impl.h"
+
 /**
  * Fills a kmMat4 structure with the values from a 16
  * element array of floats
@@ -213,6 +215,14 @@ kmMat4* const kmMat4Transpose(kmMat4* pOut, const kmMat4* pIn)
  */
 kmMat4* const kmMat4Multiply(kmMat4* pOut, const kmMat4* pM1, const kmMat4* pM2)
 {
+#if defined(__ARM_NEON__)
+
+	float mat[16];
+
+	// Invert column-order with row-order
+	NEON_Matrix4Mul( &pM2->mat[0], &pM1->mat[0], &mat[0] );
+
+#else
 	float mat[16];
 
 	const float *m1 = pM1->mat, *m2 = pM2->mat;
@@ -237,6 +247,7 @@ kmMat4* const kmMat4Multiply(kmMat4* pOut, const kmMat4* pM1, const kmMat4* pM2)
 	mat[14] = m1[2] * m2[12] + m1[6] * m2[13] + m1[10] * m2[14] + m1[14] * m2[15];
 	mat[15] = m1[3] * m2[12] + m1[7] * m2[13] + m1[11] * m2[14] + m1[15] * m2[15];
 
+#endif
 
 	memcpy(pOut->mat, mat, sizeof(float)*16);
 
@@ -654,27 +665,27 @@ kmMat4* const kmMat4LookAt(kmMat4* pOut, const kmVec3* pEye,
     kmMat4Multiply(pOut, pOut, &translate);
 
     return pOut;
-}
+}
 
 /**
  * Extract a 3x3 rotation matrix from the input 4x4 transformation.
  * Stores the result in pOut, returns pOut
- */
-kmMat3* const kmMat4ExtractRotation(kmMat3* pOut, const kmMat4* pIn)
-{
-    pOut->mat[0] = pIn->mat[0];
-    pOut->mat[1] = pIn->mat[1];
-    pOut->mat[2] = pIn->mat[2];
-
-    pOut->mat[3] = pIn->mat[4];
-    pOut->mat[4] = pIn->mat[5];
-    pOut->mat[5] = pIn->mat[6];
-
-    pOut->mat[6] = pIn->mat[8];
-    pOut->mat[7] = pIn->mat[9];
-    pOut->mat[8] = pIn->mat[10];
-
-    return pOut;
+ */
+kmMat3* const kmMat4ExtractRotation(kmMat3* pOut, const kmMat4* pIn)
+{
+    pOut->mat[0] = pIn->mat[0];
+    pOut->mat[1] = pIn->mat[1];
+    pOut->mat[2] = pIn->mat[2];
+
+    pOut->mat[3] = pIn->mat[4];
+    pOut->mat[4] = pIn->mat[5];
+    pOut->mat[5] = pIn->mat[6];
+
+    pOut->mat[6] = pIn->mat[8];
+    pOut->mat[7] = pIn->mat[9];
+    pOut->mat[8] = pIn->mat[10];
+
+    return pOut;
 }
 
 /**
@@ -684,8 +695,8 @@ kmMat3* const kmMat4ExtractRotation(kmMat3* pOut, const kmMat4* pIn)
 kmVec3* const kmMat4RotationToAxisAngle(kmVec3* pAxis, kmScalar* radians, const kmMat4* pIn)
 {
     /*Surely not this easy?*/
-    kmQuaternion temp;
-    kmMat3 rotation;
+    kmQuaternion temp;
+    kmMat3 rotation;
     kmMat4ExtractRotation(&rotation, pIn);
     kmQuaternionRotationMatrix(&temp, &rotation);
     kmQuaternionToAxisAngle(&temp, pAxis, radians);
